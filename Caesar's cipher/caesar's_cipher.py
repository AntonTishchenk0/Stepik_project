# Task 1. Рус шифр цезаря

# # Запускаем цикл for, который будет перебирать каждый символ в введенной строке (input() возвращает строку).
# for i in input():
#     # Проверяем, является ли символ буквой.
#     if i.isalpha():
#         # С помощью ord(i) получаем числовое значение символа i в кодировке Unicode.
#         # Затем к этому числу добавляем 10 (смещение на 10 позиций).
#         # Важно: ord('я') - последний символ в русской алфавитной таблице, и это значение используется
#         # для определения "грани" алфавита, чтобы учесть круговое смещение (после 'я' идет опять 'а').
#         # Затем мы берем остаток от деления на ord('я'), чтобы убедиться, что остаемся в пределах алфавита.
#         # Далее мы используем chr() для преобразования числового значения обратно в символ и выводим его.
#         print(chr((ord(i) + 10) % ord('я')), end='')
#     else:
#         # Если символ не является буквой, мы просто выводим его без изменений.
#         print(i, end='')

# Task 2. Eng шифр цезаря

# def caesar_cipher(text, shift):
#     result = ""
#     for char in text:
#         if char.isalpha():
#             # Определяем базу для сдвига в зависимости от регистра буквы (A для больших, a для маленьких)
#             base = ord('A') if char.isupper() else ord('a')
#             # Применяем сдвиг и учитываем, что алфавит круглый (после 'Z' идет 'A', после 'z' идет 'a')
#             shifted_char = chr(((ord(char) - base + shift) % 26) + base)
#             result += shifted_char
#         else:
#             # Если символ не является буквой, оставляем его неизменным
#             result += char
#     return result
#
#
# text_to_encrypt = "To be, or not to be, that is the question!"
# shift_amount = 17
# encrypted_text = caesar_cipher(text_to_encrypt, shift_amount)
# print("Зашифрованный текст:", encrypted_text)

# Task 3. Rus расшифровка

# s = 'Шсъцхр щмчжмщ йшм, нмтзж йшм лхшщзщг.'
# # Пустая строка для расшифрованного текста
# m = ''
# # Проходим по каждому символу в зашифрованном тексте
# for i in s:
#     if i.isalpha():  # Проверяем, является ли символ буквой
#         m += chr(ord(i) - 7)  # Расшифровываем символ с учетом сдвига влево на 7 позиций
#     else:
#         m += i  # Если символ не буква, оставляем его неизменным
# # Приводим результат к нижнему регистру
# m = m.lower()
# # Первую букву текста делаем заглавной
# print(m.capitalize())

# Task 4. Eng расшифровка

# n, s = -25, 'Sgd fqzrr hr zkvzxr fqddmdq nm sgd nsgdq rhcd ne sgd edmbd.'
# # Проходим по каждому символу в зашифрованной строке s
# for i in s:
#     if i.isalpha():  # Проверяем, является ли символ буквой
#         c = ('a', 'A')[i.isupper()]  # Определяем регистр символа (нижний или верхний)
#
#         # Расшифровываем символ, учитывая сдвиг n и круговой алфавит (26 букв)
#         print(chr(ord(c) + (ord(i) + n - ord(c)) % 26), end='')
#     else:
#         # Если символ не буква, оставляем его неизменным
#         print(i, end='')

# Task 5. Random расшифровка

# s = "Hawnj pk swhg xabkna ukq nqj."
# # Перебираем все возможные сдвиги от 0 до 25
# for n in range(26):
#     # Начинаем формировать расшифрованную строку для текущего сдвига
#     decrypted_text = ""
#
#     # Перебираем каждый символ в зашифрованной строке s
#     for c in s:
#         if c in ',.?! ':  # Если символ - знак пунктуации или пробел, выводим его без изменений
#             decrypted_text += c
#         elif 65 <= ord(c) <= 90:  # Если символ - заглавная буква (A-Z)
#             decrypted_text += chr((ord(c) - n - 65) % 26 + 65)
#         elif 97 <= ord(c) <= 122:  # Если символ - строчная буква (a-z)
#             decrypted_text += chr((ord(c) - n - 97) % 26 + 97)
#
#     # Выводим расшифрованную строку для текущего сдвига
#     print(decrypted_text)

# Task 6. Шифр Цезаря!!!

n = input()  # Получаем строку от пользователя.
# Удаляем из строки знаки пунктуации и символы, которые не будут учитываться при шифровании.
s = n
for j in n:
    if j in '*,.!@"-':
        s = s.replace(j, '')
# Создаем список `g`, который содержит длины слов из строки в виде чисел.
g = [len(i) for i in s.split()]
# Инициализируем переменные для шифрования.
count = 0
word_new = ''
# Проходим по каждому символу в исходной строке `n`.
for d in n:
    number = ord(d)  # Получаем числовое значение символа в кодировке Unicode.

    if d == ' ':  # Если символ - пробел, увеличиваем счетчик и добавляем его в результат.
        count += 1
        word_new += chr(number)
    elif 65 <= number <= 90:  # Если символ - заглавная буква (A-Z), выполняем шифрование.
        number += g[count]
        if number > 90:  # Если результат выходит за пределы A-Z, выполняем циклический сдвиг.
            number = number - 26
            word_new += chr(number)
        else:
            word_new += chr(number)
    elif 97 <= number <= 122:  # Если символ - строчная буква (a-z), выполняем шифрование.
        number += g[count]
        if number > 122:  # Если результат выходит за пределы a-z, выполняем циклический сдвиг.
            number = number - 26
            word_new += chr(number)
        else:
            word_new += chr(number)
    else:
        word_new += chr(number)  # Если символ не буква, добавляем его без изменений.

print(word_new)  # Выводим расшифрованную строку.
